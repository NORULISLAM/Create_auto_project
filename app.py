from __future__ import annotations

import os

os.environ["no_proxy"] = "localhost,127.0.0.1,::1"

import shutil
import time
import zipfile
from pathlib import Path

import gradio as gr
from fastapi import FastAPI, Response
from fastapi.staticfiles import StaticFiles

# --- your agent + tools ---
from agent.graph import agent
from agent.tools import PROJECT_ROOT, init_project_root


# -----------------------
# Helpers
# -----------------------
def _reset_output_dir() -> None:
    if PROJECT_ROOT.exists():
        shutil.rmtree(PROJECT_ROOT, ignore_errors=True)
    PROJECT_ROOT.mkdir(parents=True, exist_ok=True)

def _zip_project(dir_path: Path) -> str:
    zip_path = (dir_path.parent / f"{dir_path.name}.zip").resolve()
    if zip_path.exists():
        try:
            zip_path.unlink()
        except Exception:
            pass
    with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zf:
        for root, _, files in os.walk(dir_path):
            for fn in files:
                full = Path(root) / fn
                zf.write(full, arcname=str(full.relative_to(dir_path)))
    return str(zip_path)

def _dir_has_files(dir_path: Path) -> bool:
    for _, _, files in os.walk(dir_path):
        if files:
            return True
    return False

def _ensure_placeholder_index(dir_path: Path) -> None:
    index_path = dir_path / "index.html"
    if index_path.exists():
        return
    items = []
    for root, _, files in os.walk(dir_path):
        for fn in sorted(files):
            full = Path(root) / fn
            rel = full.relative_to(dir_path).as_posix()
            if rel == "index.html":
                continue
            items.append(f'<li><a href="{rel}" target="_blank" rel="noopener">{rel}</a></li>')
    listing = "\n".join(items) or "<li>(No files found)</li>"
    html = f"""<!doctype html>
<html><head>
  <meta charset="utf-8" />
  <title>Generated Output (Fallback)</title>
  <style>
    body {{ font-family: system-ui, Arial, sans-serif; margin: 24px; }}
    .note {{ background: #fff8e1; border: 1px solid #ffe082; padding: 12px; border-radius: 8px; margin-bottom: 16px; }}
    a {{ color: #2563eb; }}
  </style>
</head>
<body>
  <h1>Generated Output (Fallback)</h1>
  <div class="note">No <code>index.html</code> was generated by the pipeline, so this fallback page lists all files created.</div>
  <ul>{listing}</ul>
</body></html>"""
    index_path.write_text(html, encoding="utf-8")

def _invoke_agent_with_retries(user_prompt: str, recursion_limit: int) -> None:
    recursion_limit = int(max(5, min(recursion_limit, 40)))
    max_retries = 3
    base_delay = 8
    for attempt in range(1, max_retries + 1):
        try:
            agent.invoke({"user_prompt": user_prompt}, {"recursion_limit": recursion_limit})
            return
        except Exception as e:
            msg = str(e).lower()
            retryable = ("429" in msg) or ("rate limit" in msg) or ("tpm" in msg)
            if attempt < max_retries and retryable:
                time.sleep(base_delay * attempt)
                recursion_limit = max(5, recursion_limit - 5)
                continue
            raise

def _iframe(url: str, h: int = 700) -> str:
    return f'<iframe src="{url}" style="width:100%;height:{h}px;border:1px solid #ddd;border-radius:8px;"></iframe>'

def run_generation(prompt: str, recursion_limit: int = 20):
    logs = []
    try:
        logs.append("🚧 Preparing output folder…")
        _reset_output_dir()

        logs.append("🤖 Running LangGraph pipeline (planner → architect → coder)…")
        _invoke_agent_with_retries(prompt, recursion_limit)

        if not _dir_has_files(PROJECT_ROOT):
            logs.append("⚠️ Pipeline finished but wrote no files.")
            return "\n".join(logs), None, "<div style='color:#b45309'>No files were generated.</div>"

        _ensure_placeholder_index(PROJECT_ROOT)

        logs.append("🧩 Build complete. Creating ZIP…")
        zip_path = _zip_project(PROJECT_ROOT)

        preview_url = "/preview/index.html"
        logs.append(f"🌐 Preview ready at {preview_url}")
        logs.append("✅ Done.")
        preview_html = (
            "<div style='margin-bottom:10px'>"
            "<a href='/preview/index.html' target='_blank' rel='noopener'>Open Preview in new tab</a>"
            "</div>" + _iframe(preview_url)
        )
        return "\n".join(logs), zip_path, preview_html

    except Exception as e:
        emsg = str(e)
        friendly = [f"❌ Error: {emsg}"]
        if any(k in emsg.lower() for k in ["429", "rate limit", "tpm"]):
            friendly.append("💡 Tip: Rate limit hit. Retry later or lower Recursion Limit.")
        if _dir_has_files(PROJECT_ROOT):
            friendly.append("⚠️ Partial output detected. Zipping what exists…")
            _ensure_placeholder_index(PROJECT_ROOT)
            zip_path = _zip_project(PROJECT_ROOT)
            preview_url = "/preview/index.html"
            friendly.append(f"🌐 Preview (partial) at {preview_url}")
            preview_html = (
                "<div style='margin-bottom:10px'>"
                "<a href='/preview/index.html' target='_blank' rel='noopener'>Open Preview in new tab</a>"
                "</div>" + _iframe(preview_url)
            )
            return "\n".join(friendly), zip_path, preview_html
        friendly.append("🛑 No files were generated.")
        return "\n".join(friendly), None, "<div style='color:red'>Generation failed.</div>"

# -----------------------
# Build the Gradio UI
# -----------------------
with gr.Blocks(analytics_enabled=False) as demo:
    gr.Markdown("# Coder-Uncle – Live Demo\nType a prompt, watch logs, preview the site, then download the ZIP.")
    with gr.Row():
        prompt = gr.Textbox(
            label="Prompt",
            placeholder="e.g., HTML、CSS、JavaScriptを用いて、モダンなデザインのTODOアプリを構築してください。",
            lines=3,
            value="HTML、CSS、JavaScriptを用いて、モダンなデザインのTODOアプリを構築してください。",
        )
    with gr.Row():
        recursion = gr.Slider(5, 40, value=20, step=5, label="Recursion Limit (lower = fewer tokens)")
    with gr.Row():
        run_btn = gr.Button("Generate", variant="primary")
    logs = gr.Textbox(label="Logs", lines=14)
    zip_btn = gr.DownloadButton(label="Download ZIP", value=None)
    preview = gr.HTML()

    def on_click(p, r):
        out_logs, out_zip, out_iframe = run_generation(p, r)
        return out_logs, out_zip, out_iframe

    run_btn.click(on_click, [prompt, recursion], [logs, zip_btn, preview])

# -----------------------
# ONE FastAPI app for everything
# -----------------------
init_project_root()
PROJECT_ROOT.mkdir(parents=True, exist_ok=True)  # ensure dir exists for mount

fastapi_app = FastAPI()

# Static preview (points to PROJECT_ROOT)
fastapi_app.mount("/preview", StaticFiles(directory=str(PROJECT_ROOT), html=True), name="preview")

# Simple routes (manifest / favicon)
@fastapi_app.get("/manifest.json")
def manifest_route():
    return {
        "name": "Coder Uncle – Demo",
        "short_name": "CoderUncle",
        "start_url": "/",
        "display": "standalone",
        "background_color": "#ffffff",
        "theme_color": "#000000",
        "icons": [],
    }

@fastapi_app.get("/favicon.ico")
def favicon_route():
    return Response(b"", media_type="image/x-icon")

# Mount Gradio at root "/"
from gradio import mount_gradio_app

app = mount_gradio_app(fastapi_app, demo, path="/")

# -----------------------
# Launch with uvicorn (single app)
# -----------------------
if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", "7860"))
    uvicorn.run(app, host="0.0.0.0", port=port)
